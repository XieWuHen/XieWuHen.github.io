<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的vue音乐播放器实战</title>
      <link href="/2020/07/03/%E6%88%91%E7%9A%84vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%AE%9E%E6%88%98/"/>
      <url>/2020/07/03/%E6%88%91%E7%9A%84vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h4 id="浏览地址："><a href="#浏览地址：" class="headerlink" title="浏览地址："></a>浏览地址：</h4><p><a href="http://114.118.13.211:5001/wuhen_music" target="_blank" rel="noopener">http://114.118.13.211:5001/wuhen_music</a><br>注意请用手机打开</p><h4 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h4><p><a href="https://github.com/XieWuHen/web-music" target="_blank" rel="noopener">https://github.com/XieWuHen/web-music</a></p><h4 id="使用技术栈"><a href="#使用技术栈" class="headerlink" title="使用技术栈"></a>使用技术栈</h4><ul><li>vue</li><li>vue-axios</li><li>vue-router</li><li>better-scroll</li><li>swiper</li></ul><h4 id="后台数据来源"><a href="#后台数据来源" class="headerlink" title="后台数据来源"></a>后台数据来源</h4><ul><li>网易云api: <a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=neteasecloudmusicapi" target="_blank" rel="noopener">https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=neteasecloudmusicapi</a></li></ul><hr><p>####特别说明，歌手页面由于网易云api提供的歌手头像图片都太大，没得选，几乎每张都2M左右，所以我不显示图片了，要不然非常慢和卡顿，不知道设计api的大大怎么个想法，吐槽一下，还有其它的图片资源也都是很大体积的，还没得选，每张图片都1M以上，实在蛋疼，还有api返回数据及其繁杂啰嗦，一层套着一层有时套了n层看的头皮发麻，有机会我自己爬网易云api自己造接口（然并卵）哼哼</p><hr><h4 id="歌手页面的歌手名字按首字母排序及首字母滚动导航功能："><a href="#歌手页面的歌手名字按首字母排序及首字母滚动导航功能：" class="headerlink" title="歌手页面的歌手名字按首字母排序及首字母滚动导航功能："></a>歌手页面的歌手名字按首字母排序及首字母滚动导航功能：</h4><hr><h5 id="按首字母排序"><a href="#按首字母排序" class="headerlink" title="按首字母排序:"></a>按首字母排序:</h5><p>这里需要用到”js-pinyin”这个插件，npm安装好它，它能够将中文转成拼音，然后截取第一个字符即为首字母，然后使用 oldList.sort(a,b) 方法 return a.localeCompare(b) 进行 Unicode 编码比较大小并排序，得到新的排序好的数据newList </p><h5 id="首字母滚动导航"><a href="#首字母滚动导航" class="headerlink" title="首字母滚动导航:"></a>首字母滚动导航:</h5><p>先提取 oldList 每位歌手名字首字母并大写，其它特殊字符的统一分配到 * 类别里（包括日语韩语特殊字符等等）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/^[a-zA-Z]+$/</span>; <span class="comment">//26个字母</span></span><br><span class="line">artists.forEach(<span class="function">(<span class="params">val, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> firstChar = pinyin.getCamelChars(val.name.slice(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">if</span>(!reg.test(firstChar))&#123;</span><br><span class="line">    firstChar = <span class="string">'*'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.sortList.push(firstChar);</span><br><span class="line">  artists[index].tag = firstChar;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 去除重复</span></span><br><span class="line"><span class="keyword">this</span>.sortList = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="keyword">this</span>.sortList);</span><br><span class="line"><span class="keyword">this</span>.sortList = [...this.sortList];</span><br><span class="line"><span class="keyword">this</span>.sortList.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//这里给每个歌手数据价格tag标签当成导航标记，便于导航跳转</span></span><br><span class="line">  <span class="keyword">this</span>.list.push(&#123;</span><br><span class="line">  tag: val,</span><br><span class="line">  data: artists.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.tag == val)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为每一个tab添加点击事件：<br>@click=”toTag(index)”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">toTag(index)&#123;</span><br><span class="line">  <span class="comment">// console.log('屏幕滚动到相应的索引值：'+index);</span></span><br><span class="line">  <span class="keyword">let</span> el = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"group"</span>)[index];</span><br><span class="line">  <span class="keyword">this</span>.$refs.myScroll.scrollToElement(el, <span class="number">1000</span>, <span class="number">0</span>, <span class="number">-40</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析歌词："><a href="#解析歌词：" class="headerlink" title="解析歌词："></a>解析歌词：</h4><hr><p>创建一个工具js插件（dealLyrcics.js），网易云歌词数据是字符串格式的，所以我们需要对其进行解析成数组，分别对应为时间轴数组和歌词数组。歌词数据是有规律的，时间都用 [] 包裹起来，所以分别用 str.split(‘[‘) 和 value.split(‘]’) 将[]全部去掉并分割为数组，即： [00:00:01]一二三四五\n[00:00:12]五四三二一\n 变成数组 arry = [‘00:00:01’, ‘一二三四五\n’, ‘00:00:12’, ‘五四三二一\n’]，最后分别将奇数下标的数据放在时间数组arry1 = [‘00:00:01’, ‘00:00:12’]，将偶数小标的数据放在对应的歌词数组arry2 = [‘一二三四五\n’, ‘五四三二一\n’]<br>时间轴数组是为了实时匹配音乐播放时间轴的，即音乐播放到某某时间轴时就到了哪个对应时间轴的歌词高亮了。</p><h4 id="歌词音乐同步滚动功能（难点）："><a href="#歌词音乐同步滚动功能（难点）：" class="headerlink" title="歌词音乐同步滚动功能（难点）："></a>歌词音乐同步滚动功能（难点）：</h4><hr><p>监听音乐文件时间变化，然后歌词页面用watch监听store里音乐时间的变化，并判断歌词数组中时间点是否在当前音乐播放时间的0.4s内（即大于当前播放时间-0.2s且小于当前播放时间+0.2s），在条件OK下再执行滚动和样式改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听音乐文件播放时间变化：</span></span><br><span class="line">music.addEventListener(<span class="string">"timeupdate"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 这里将获取到的音乐当前播放的时长存到vuex的store里去共享</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 歌词页面监听vuex里的音乐时间状态变化：</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  songControl: &#123;</span><br><span class="line">    deep: <span class="literal">true</span>,</span><br><span class="line">    handler(val)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span>(<span class="keyword">this</span>.lyrObj.time) === <span class="string">'undefined'</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">      <span class="comment">// 遍历一遍，怕有的歌词时间点间隔太小监听的timeupdate会错过导致出错，所以便利来设定此时的index下标</span></span><br><span class="line">      <span class="keyword">this</span>.lyrObj.time.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(item &lt;= val.curTime)&#123;</span><br><span class="line">          <span class="keyword">this</span>.lyrIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// console.log(val.curTime);</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.lyrObj.time[<span class="keyword">this</span>.lyrIndex] &gt;= val.curTime<span class="number">-0.2</span> &amp;&amp; <span class="keyword">this</span>.lyrObj.time[<span class="keyword">this</span>.lyrIndex] &lt;= val.curTime+<span class="number">0.2</span>)&#123;</span><br><span class="line">        <span class="comment">// console.log('下一条歌词来了');</span></span><br><span class="line">        <span class="keyword">this</span>.lyrRun();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 歌词滚动及样式函数：</span></span><br><span class="line">lyrRun()&#123;</span><br><span class="line">  <span class="keyword">let</span> boxH = <span class="keyword">this</span>.$refs.context.offsetHeight;</span><br><span class="line">  <span class="keyword">let</span> content = <span class="keyword">this</span>.$refs.lyrBox;</span><br><span class="line">  <span class="keyword">let</span> height = content.offsetHeight;</span><br><span class="line">  <span class="comment">// console.log('||');</span></span><br><span class="line">  <span class="keyword">if</span>(height == <span class="number">0</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">  <span class="keyword">this</span>.cssIndex = <span class="keyword">this</span>.lyrIndex; <span class="comment">//item中的index=cssIndex时样式改变</span></span><br><span class="line">  <span class="comment">//向上滚动：</span></span><br><span class="line">  <span class="keyword">let</span> curTop = <span class="keyword">this</span>.$refs[<span class="string">`lyrItem<span class="subst">$&#123;<span class="keyword">this</span>.lyrIndex&#125;</span>`</span>][<span class="number">0</span>].offsetTop - (boxH/<span class="number">2</span>);</span><br><span class="line">  content.style.cssText = <span class="string">`transform: translateY(<span class="subst">$&#123;-curTop&#125;</span>px)`</span>;</span><br><span class="line">  </span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 这里的curTop值计算公式为：</span></span><br><span class="line"><span class="comment">// X + 容器或可视窗口高度/2 = 当前索引的这句歌词所在元素的offsetTop</span></span><br><span class="line"><span class="comment">// 求这个 X 就是curTop</span></span><br><span class="line"><span class="comment">// 这会保证当前激活/时间点的歌词始终保持在容器可视区域Y轴的中间位置</span></span><br></pre></td></tr></table></figure><p>#####当前问题和待改善：<br>由于v-show会让歌词页面没显示的时候所有元素的宽高都为0，所以我只能实时改变承载着歌词item的父元素lyrBox的transform: translateY()来实现滚动，这样就不会在隐藏歌词页面时所以变量变成0之后的诸多麻烦，反正再显示歌词页面时它又会实时的滚动到正确位置，也就是这样会导致刚显示歌词页面时候会看到0.5秒的从0滚动到当前歌词的位置，而不是由上一句歌词位置滚动一点点到当前时间点的歌词位置。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 音乐播放器 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个测试文章</title>
      <link href="/2020/01/01/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2020/01/01/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><h3 id="测试成功的一页呢"><a href="#测试成功的一页呢" class="headerlink" title="测试成功的一页呢"></a>测试成功的一页呢</h3><p>Oh my god ! Look this guy, he is so strong</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/01/hello-world/"/>
      <url>/2020/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
